// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResetPassword component: ResetPasswordRenderer renders when no error or success message 1`] = `
<Component
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <Component
    style={
      Object {
        "backgroundColor": "rgba(255, 255, 255, .85)",
        "borderRadius": 20,
        "padding": 20,
        "width": "90%",
      }
    }
  >
    <Component>
      <Component
        style={
          Object {
            "alignSelf": "center",
            "fontSize": 40,
            "fontWeight": "bold",
          }
        }
      >
        Clucker
      </Component>
    </Component>
    <FieldGroup
      render={[Function]}
      strict={true}
    />
  </Component>
</Component>
`;

exports[`ResetPassword component: ResetPasswordRenderer renders when success message, no error 1`] = `
<Component
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <Component
    style={
      Object {
        "backgroundColor": "rgba(255, 255, 255, .85)",
        "borderRadius": 20,
        "padding": 20,
        "width": "90%",
      }
    }
  >
    <Component>
      <Component
        style={
          Object {
            "alignSelf": "center",
            "fontSize": 40,
            "fontWeight": "bold",
          }
        }
      >
        Clucker
      </Component>
    </Component>
    <Component
      style={
        Object {
          "color": "green",
          "padding": 20,
        }
      }
    >
      Check your inbox for an email.
    </Component>
    <FieldGroup
      render={[Function]}
      strict={true}
    />
  </Component>
</Component>
`;

exports[`ResetPassword component: ResetPasswordRenderer renders with both error and success message 1`] = `
<Component
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <Component
    style={
      Object {
        "backgroundColor": "rgba(255, 255, 255, .85)",
        "borderRadius": 20,
        "padding": 20,
        "width": "90%",
      }
    }
  >
    <Component>
      <Component
        style={
          Object {
            "alignSelf": "center",
            "fontSize": 40,
            "fontWeight": "bold",
          }
        }
      >
        Clucker
      </Component>
    </Component>
    <Component
      style={
        Object {
          "color": "red",
          "padding": 20,
        }
      }
    >
      Some error occurred
    </Component>
    <FieldGroup
      render={[Function]}
      strict={true}
    />
  </Component>
</Component>
`;

exports[`ResetPassword component: ResetPasswordRenderer renders with error message, no success message 1`] = `
<Component
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <Component
    style={
      Object {
        "backgroundColor": "rgba(255, 255, 255, .85)",
        "borderRadius": 20,
        "padding": 20,
        "width": "90%",
      }
    }
  >
    <Component>
      <Component
        style={
          Object {
            "alignSelf": "center",
            "fontSize": 40,
            "fontWeight": "bold",
          }
        }
      >
        Clucker
      </Component>
    </Component>
    <Component
      style={
        Object {
          "color": "red",
          "padding": 20,
        }
      }
    >
      Some error occurred
    </Component>
    <FieldGroup
      render={[Function]}
      strict={true}
    />
  </Component>
</Component>
`;

exports[`ResetPassword component: Should render 1`] = `
<ResetPasswordRenderer
  error={null}
  form={
    FormGroup {
      "_onDisabledChange": Array [],
      "_pendingChange": false,
      "_pendingDirty": false,
      "_pendingTouched": false,
      "asyncValidator": null,
      "controls": Object {
        "email": FormControl {
          "_onCollectionChange": [Function],
          "_onDisabledChange": Array [],
          "_parent": [Circular],
          "_pendingChange": true,
          "_pendingDirty": false,
          "_pendingTouched": false,
          "_pendingValue": "",
          "active": false,
          "asyncValidator": null,
          "errors": Object {
            "required": true,
          },
          "formState": "",
          "get": [Function],
          "getError": [Function],
          "handler": [Function],
          "hasError": [Function],
          "meta": Object {},
          "onBlur": [Function],
          "onBlurChanges": Observable {
            "observers": Array [],
          },
          "onChange": [Function],
          "onFocus": [Function],
          "onValueChanges": Observable {
            "observers": Array [],
          },
          "patchValue": [Function],
          "pristine": true,
          "reset": [Function],
          "setValue": [Function],
          "stateChanges": Observable {
            "observers": Array [],
          },
          "status": "INVALID",
          "statusChanges": Observable {
            "observers": Array [],
          },
          "submitted": false,
          "touched": false,
          "validator": [Function],
          "validatorsOrOpts": Object {
            "asyncValidators": null,
            "updateOn": null,
            "validators": Array [
              [Function],
              [Function],
            ],
          },
          "value": "",
          "valueChanges": Observable {
            "observers": Array [],
          },
        },
      },
      "errors": null,
      "get": [Function],
      "getError": [Function],
      "handleSubmit": [Function],
      "hasError": [Function],
      "meta": Object {},
      "patchValue": [Function],
      "pristine": true,
      "reset": [Function],
      "setValue": [Function],
      "stateChanges": Observable {
        "observers": Array [],
      },
      "status": "INVALID",
      "statusChanges": Observable {
        "observers": Array [],
      },
      "submitted": false,
      "touched": false,
      "validator": null,
      "validatorOrOpts": Object {
        "asyncValidators": null,
        "updateOn": null,
        "validators": null,
      },
      "value": Object {
        "email": "",
      },
      "valueChanges": Observable {
        "observers": Array [],
      },
    }
  }
  handleSubmit={[Function]}
  successMessage={null}
/>
`;
