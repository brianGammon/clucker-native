// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChickenPhotoPicker renders when existing photo was removed 1`] = `
<Styled(ViewNB)
  style={
    Object {
      "marginTop": 30,
    }
  }
>
  <CommonLabel
    style={null}
    text="Profile Photo:"
  />
  <Styled(ViewNB)
    style={
      Object {
        "flexDirection": "row",
      }
    }
  >
    <Image
      source={
        Object {
          "testUri": "../../../src/assets/default-profile-photo.png",
        }
      }
      style={
        Object {
          "height": 200,
          "width": 200,
        }
      }
    />
    <Styled(ViewNB)
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Reset
        </Styled(Text)>
      </Styled(Button)>
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Select Photo
        </Styled(Text)>
      </Styled(Button)>
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Take Photo
        </Styled(Text)>
      </Styled(Button)>
    </Styled(ViewNB)>
  </Styled(ViewNB)>
</Styled(ViewNB)>
`;

exports[`ChickenPhotoPicker renders when no previous photo and no new photo selected 1`] = `
<Styled(ViewNB)
  style={
    Object {
      "marginTop": 30,
    }
  }
>
  <CommonLabel
    style={null}
    text="Profile Photo:"
  />
  <Styled(ViewNB)
    style={
      Object {
        "flexDirection": "row",
      }
    }
  >
    <Image
      source={
        Object {
          "testUri": "../../../src/assets/default-profile-photo.png",
        }
      }
      style={
        Object {
          "height": 200,
          "width": 200,
        }
      }
    />
    <Styled(ViewNB)
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Select Photo
        </Styled(Text)>
      </Styled(Button)>
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Take Photo
        </Styled(Text)>
      </Styled(Button)>
    </Styled(ViewNB)>
  </Styled(ViewNB)>
</Styled(ViewNB)>
`;

exports[`ChickenPhotoPicker renders when original photo exists, new photo selected 1`] = `
<Styled(ViewNB)
  style={
    Object {
      "marginTop": 30,
    }
  }
>
  <CommonLabel
    style={null}
    text="Profile Photo:"
  />
  <Styled(ViewNB)
    style={
      Object {
        "flexDirection": "row",
      }
    }
  >
    <Image
      source={
        Object {
          "uri": "data:jpeg;base64,testdata",
        }
      }
      style={
        Object {
          "height": 200,
          "width": 200,
        }
      }
    />
    <Styled(ViewNB)
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Reset
        </Styled(Text)>
      </Styled(Button)>
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Select Photo
        </Styled(Text)>
      </Styled(Button)>
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Take Photo
        </Styled(Text)>
      </Styled(Button)>
    </Styled(ViewNB)>
  </Styled(ViewNB)>
</Styled(ViewNB)>
`;

exports[`ChickenPhotoPicker renders when originalPhotoUrl exists, and new image not selected 1`] = `
<Styled(ViewNB)
  style={
    Object {
      "marginTop": 30,
    }
  }
>
  <CommonLabel
    style={null}
    text="Profile Photo:"
  />
  <Styled(ViewNB)
    style={
      Object {
        "flexDirection": "row",
      }
    }
  >
    <Image
      source={
        Object {
          "uri": "/test",
        }
      }
      style={
        Object {
          "height": 200,
          "width": 200,
        }
      }
    />
    <Styled(ViewNB)
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Remove
        </Styled(Text)>
      </Styled(Button)>
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Select Photo
        </Styled(Text)>
      </Styled(Button)>
      <Styled(Button)
        onPress={[Function]}
        transparent={true}
      >
        <Styled(Text)>
          Take Photo
        </Styled(Text)>
      </Styled(Button)>
    </Styled(ViewNB)>
  </Styled(ViewNB)>
</Styled(ViewNB)>
`;
